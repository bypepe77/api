// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bypepe77/api/ent/likes"
	"github.com/bypepe77/api/ent/post"
	"github.com/bypepe77/api/ent/user"
)

// Likes is the model entity for the Likes schema.
type Likes struct {
	config `json:"-"`
	// LikedAt holds the value of the "liked_at" field.
	LikedAt time.Time `json:"liked_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikesQuery when eager-loading is set.
	Edges LikesEdges `json:"edges"`
}

// LikesEdges holds the relations/edges for other nodes in the graph.
type LikesEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tweet holds the value of the tweet edge.
	Tweet *Post `json:"tweet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikesEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TweetOrErr returns the Tweet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikesEdges) TweetOrErr() (*Post, error) {
	if e.loadedTypes[1] {
		if e.Tweet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Tweet, nil
	}
	return nil, &NotLoadedError{edge: "tweet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Likes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case likes.FieldUserID, likes.FieldPostID:
			values[i] = new(sql.NullInt64)
		case likes.FieldLikedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Likes", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Likes fields.
func (l *Likes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likes.FieldLikedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field liked_at", values[i])
			} else if value.Valid {
				l.LikedAt = value.Time
			}
		case likes.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				l.UserID = int(value.Int64)
			}
		case likes.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				l.PostID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Likes entity.
func (l *Likes) QueryUser() *UserQuery {
	return (&LikesClient{config: l.config}).QueryUser(l)
}

// QueryTweet queries the "tweet" edge of the Likes entity.
func (l *Likes) QueryTweet() *PostQuery {
	return (&LikesClient{config: l.config}).QueryTweet(l)
}

// Update returns a builder for updating this Likes.
// Note that you need to call Likes.Unwrap() before calling this method if this Likes
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Likes) Update() *LikesUpdateOne {
	return (&LikesClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Likes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Likes) Unwrap() *Likes {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Likes is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Likes) String() string {
	var builder strings.Builder
	builder.WriteString("Likes(")
	builder.WriteString("liked_at=")
	builder.WriteString(l.LikedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UserID))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", l.PostID))
	builder.WriteByte(')')
	return builder.String()
}

// LikesSlice is a parsable slice of Likes.
type LikesSlice []*Likes

func (l LikesSlice) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
