// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/bypepe77/api/ent/follows"
	"github.com/bypepe77/api/ent/likes"
	"github.com/bypepe77/api/ent/post"
	"github.com/bypepe77/api/ent/predicate"
	"github.com/bypepe77/api/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFollows = "Follows"
	TypeLikes   = "Likes"
	TypePost    = "Post"
	TypeUser    = "User"
)

// FollowsMutation represents an operation that mutates the Follows nodes in the graph.
type FollowsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	followedby    *int
	addfollowedby *int
	follower      *int
	addfollower   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Follows, error)
	predicates    []predicate.Follows
}

var _ ent.Mutation = (*FollowsMutation)(nil)

// followsOption allows management of the mutation configuration using functional options.
type followsOption func(*FollowsMutation)

// newFollowsMutation creates new mutation for the Follows entity.
func newFollowsMutation(c config, op Op, opts ...followsOption) *FollowsMutation {
	m := &FollowsMutation{
		config:        c,
		op:            op,
		typ:           TypeFollows,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFollowsID sets the ID field of the mutation.
func withFollowsID(id int) followsOption {
	return func(m *FollowsMutation) {
		var (
			err   error
			once  sync.Once
			value *Follows
		)
		m.oldValue = func(ctx context.Context) (*Follows, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Follows.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFollows sets the old Follows of the mutation.
func withFollows(node *Follows) followsOption {
	return func(m *FollowsMutation) {
		m.oldValue = func(context.Context) (*Follows, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FollowsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FollowsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FollowsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FollowsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Follows.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFollowedby sets the "followedby" field.
func (m *FollowsMutation) SetFollowedby(i int) {
	m.followedby = &i
	m.addfollowedby = nil
}

// Followedby returns the value of the "followedby" field in the mutation.
func (m *FollowsMutation) Followedby() (r int, exists bool) {
	v := m.followedby
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowedby returns the old "followedby" field's value of the Follows entity.
// If the Follows object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowsMutation) OldFollowedby(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowedby is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowedby requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowedby: %w", err)
	}
	return oldValue.Followedby, nil
}

// AddFollowedby adds i to the "followedby" field.
func (m *FollowsMutation) AddFollowedby(i int) {
	if m.addfollowedby != nil {
		*m.addfollowedby += i
	} else {
		m.addfollowedby = &i
	}
}

// AddedFollowedby returns the value that was added to the "followedby" field in this mutation.
func (m *FollowsMutation) AddedFollowedby() (r int, exists bool) {
	v := m.addfollowedby
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowedby resets all changes to the "followedby" field.
func (m *FollowsMutation) ResetFollowedby() {
	m.followedby = nil
	m.addfollowedby = nil
}

// SetFollower sets the "follower" field.
func (m *FollowsMutation) SetFollower(i int) {
	m.follower = &i
	m.addfollower = nil
}

// Follower returns the value of the "follower" field in the mutation.
func (m *FollowsMutation) Follower() (r int, exists bool) {
	v := m.follower
	if v == nil {
		return
	}
	return *v, true
}

// OldFollower returns the old "follower" field's value of the Follows entity.
// If the Follows object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowsMutation) OldFollower(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollower: %w", err)
	}
	return oldValue.Follower, nil
}

// AddFollower adds i to the "follower" field.
func (m *FollowsMutation) AddFollower(i int) {
	if m.addfollower != nil {
		*m.addfollower += i
	} else {
		m.addfollower = &i
	}
}

// AddedFollower returns the value that was added to the "follower" field in this mutation.
func (m *FollowsMutation) AddedFollower() (r int, exists bool) {
	v := m.addfollower
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollower resets all changes to the "follower" field.
func (m *FollowsMutation) ResetFollower() {
	m.follower = nil
	m.addfollower = nil
}

// Where appends a list predicates to the FollowsMutation builder.
func (m *FollowsMutation) Where(ps ...predicate.Follows) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FollowsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Follows).
func (m *FollowsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FollowsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.followedby != nil {
		fields = append(fields, follows.FieldFollowedby)
	}
	if m.follower != nil {
		fields = append(fields, follows.FieldFollower)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FollowsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case follows.FieldFollowedby:
		return m.Followedby()
	case follows.FieldFollower:
		return m.Follower()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FollowsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case follows.FieldFollowedby:
		return m.OldFollowedby(ctx)
	case follows.FieldFollower:
		return m.OldFollower(ctx)
	}
	return nil, fmt.Errorf("unknown Follows field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case follows.FieldFollowedby:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowedby(v)
		return nil
	case follows.FieldFollower:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollower(v)
		return nil
	}
	return fmt.Errorf("unknown Follows field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FollowsMutation) AddedFields() []string {
	var fields []string
	if m.addfollowedby != nil {
		fields = append(fields, follows.FieldFollowedby)
	}
	if m.addfollower != nil {
		fields = append(fields, follows.FieldFollower)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FollowsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case follows.FieldFollowedby:
		return m.AddedFollowedby()
	case follows.FieldFollower:
		return m.AddedFollower()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case follows.FieldFollowedby:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowedby(v)
		return nil
	case follows.FieldFollower:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollower(v)
		return nil
	}
	return fmt.Errorf("unknown Follows numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FollowsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FollowsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FollowsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Follows nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FollowsMutation) ResetField(name string) error {
	switch name {
	case follows.FieldFollowedby:
		m.ResetFollowedby()
		return nil
	case follows.FieldFollower:
		m.ResetFollower()
		return nil
	}
	return fmt.Errorf("unknown Follows field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FollowsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FollowsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FollowsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FollowsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FollowsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FollowsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FollowsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Follows unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FollowsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Follows edge %s", name)
}

// LikesMutation represents an operation that mutates the Likes nodes in the graph.
type LikesMutation struct {
	config
	op            Op
	typ           string
	liked_at      *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	tweet         *int
	clearedtweet  bool
	done          bool
	oldValue      func(context.Context) (*Likes, error)
	predicates    []predicate.Likes
}

var _ ent.Mutation = (*LikesMutation)(nil)

// likesOption allows management of the mutation configuration using functional options.
type likesOption func(*LikesMutation)

// newLikesMutation creates new mutation for the Likes entity.
func newLikesMutation(c config, op Op, opts ...likesOption) *LikesMutation {
	m := &LikesMutation{
		config:        c,
		op:            op,
		typ:           TypeLikes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetLikedAt sets the "liked_at" field.
func (m *LikesMutation) SetLikedAt(t time.Time) {
	m.liked_at = &t
}

// LikedAt returns the value of the "liked_at" field in the mutation.
func (m *LikesMutation) LikedAt() (r time.Time, exists bool) {
	v := m.liked_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikedAt resets all changes to the "liked_at" field.
func (m *LikesMutation) ResetLikedAt() {
	m.liked_at = nil
}

// SetUserID sets the "user_id" field.
func (m *LikesMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LikesMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LikesMutation) ResetUserID() {
	m.user = nil
}

// SetPostID sets the "post_id" field.
func (m *LikesMutation) SetPostID(i int) {
	m.tweet = &i
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *LikesMutation) PostID() (r int, exists bool) {
	v := m.tweet
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *LikesMutation) ResetPostID() {
	m.tweet = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *LikesMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LikesMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *LikesMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikesMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetTweetID sets the "tweet" edge to the Post entity by id.
func (m *LikesMutation) SetTweetID(id int) {
	m.tweet = &id
}

// ClearTweet clears the "tweet" edge to the Post entity.
func (m *LikesMutation) ClearTweet() {
	m.clearedtweet = true
}

// TweetCleared reports if the "tweet" edge to the Post entity was cleared.
func (m *LikesMutation) TweetCleared() bool {
	return m.clearedtweet
}

// TweetID returns the "tweet" edge ID in the mutation.
func (m *LikesMutation) TweetID() (id int, exists bool) {
	if m.tweet != nil {
		return *m.tweet, true
	}
	return
}

// TweetIDs returns the "tweet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TweetID instead. It exists only for internal usage by the builders.
func (m *LikesMutation) TweetIDs() (ids []int) {
	if id := m.tweet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTweet resets all changes to the "tweet" edge.
func (m *LikesMutation) ResetTweet() {
	m.tweet = nil
	m.clearedtweet = false
}

// Where appends a list predicates to the LikesMutation builder.
func (m *LikesMutation) Where(ps ...predicate.Likes) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LikesMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Likes).
func (m *LikesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikesMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.liked_at != nil {
		fields = append(fields, likes.FieldLikedAt)
	}
	if m.user != nil {
		fields = append(fields, likes.FieldUserID)
	}
	if m.tweet != nil {
		fields = append(fields, likes.FieldPostID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case likes.FieldLikedAt:
		return m.LikedAt()
	case likes.FieldUserID:
		return m.UserID()
	case likes.FieldPostID:
		return m.PostID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Likes does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case likes.FieldLikedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikedAt(v)
		return nil
	case likes.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case likes.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Likes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikesMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikesMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Likes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Likes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikesMutation) ResetField(name string) error {
	switch name {
	case likes.FieldLikedAt:
		m.ResetLikedAt()
		return nil
	case likes.FieldUserID:
		m.ResetUserID()
		return nil
	case likes.FieldPostID:
		m.ResetPostID()
		return nil
	}
	return fmt.Errorf("unknown Likes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, likes.EdgeUser)
	}
	if m.tweet != nil {
		edges = append(edges, likes.EdgeTweet)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case likes.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case likes.EdgeTweet:
		if id := m.tweet; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, likes.EdgeUser)
	}
	if m.clearedtweet {
		edges = append(edges, likes.EdgeTweet)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikesMutation) EdgeCleared(name string) bool {
	switch name {
	case likes.EdgeUser:
		return m.cleareduser
	case likes.EdgeTweet:
		return m.clearedtweet
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikesMutation) ClearEdge(name string) error {
	switch name {
	case likes.EdgeUser:
		m.ClearUser()
		return nil
	case likes.EdgeTweet:
		m.ClearTweet()
		return nil
	}
	return fmt.Errorf("unknown Likes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikesMutation) ResetEdge(name string) error {
	switch name {
	case likes.EdgeUser:
		m.ResetUser()
		return nil
	case likes.EdgeTweet:
		m.ResetTweet()
		return nil
	}
	return fmt.Errorf("unknown Likes edge %s", name)
}

// PostMutation represents an operation that mutates the Post nodes in the graph.
type PostMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	content            *string
	hashtags           *[]string
	appendhashtags     []string
	links              *[]string
	appendlinks        []string
	shared             *bool
	clearedFields      map[string]struct{}
	author             *int
	clearedauthor      bool
	liked_users        map[int]struct{}
	removedliked_users map[int]struct{}
	clearedliked_users bool
	done               bool
	oldValue           func(context.Context) (*Post, error)
	predicates         []predicate.Post
}

var _ ent.Mutation = (*PostMutation)(nil)

// postOption allows management of the mutation configuration using functional options.
type postOption func(*PostMutation)

// newPostMutation creates new mutation for the Post entity.
func newPostMutation(c config, op Op, opts ...postOption) *PostMutation {
	m := &PostMutation{
		config:        c,
		op:            op,
		typ:           TypePost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPostID sets the ID field of the mutation.
func withPostID(id int) postOption {
	return func(m *PostMutation) {
		var (
			err   error
			once  sync.Once
			value *Post
		)
		m.oldValue = func(ctx context.Context) (*Post, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Post.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPost sets the old Post of the mutation.
func withPost(node *Post) postOption {
	return func(m *PostMutation) {
		m.oldValue = func(context.Context) (*Post, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Post.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAuthorID sets the "author_id" field.
func (m *PostMutation) SetAuthorID(i int) {
	m.author = &i
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *PostMutation) AuthorID() (r int, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldAuthorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ClearAuthorID clears the value of the "author_id" field.
func (m *PostMutation) ClearAuthorID() {
	m.author = nil
	m.clearedFields[post.FieldAuthorID] = struct{}{}
}

// AuthorIDCleared returns if the "author_id" field was cleared in this mutation.
func (m *PostMutation) AuthorIDCleared() bool {
	_, ok := m.clearedFields[post.FieldAuthorID]
	return ok
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *PostMutation) ResetAuthorID() {
	m.author = nil
	delete(m.clearedFields, post.FieldAuthorID)
}

// SetCreatedAt sets the "created_at" field.
func (m *PostMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PostMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PostMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetContent sets the "content" field.
func (m *PostMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *PostMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *PostMutation) ResetContent() {
	m.content = nil
}

// SetHashtags sets the "hashtags" field.
func (m *PostMutation) SetHashtags(s []string) {
	m.hashtags = &s
	m.appendhashtags = nil
}

// Hashtags returns the value of the "hashtags" field in the mutation.
func (m *PostMutation) Hashtags() (r []string, exists bool) {
	v := m.hashtags
	if v == nil {
		return
	}
	return *v, true
}

// OldHashtags returns the old "hashtags" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldHashtags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashtags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashtags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashtags: %w", err)
	}
	return oldValue.Hashtags, nil
}

// AppendHashtags adds s to the "hashtags" field.
func (m *PostMutation) AppendHashtags(s []string) {
	m.appendhashtags = append(m.appendhashtags, s...)
}

// AppendedHashtags returns the list of values that were appended to the "hashtags" field in this mutation.
func (m *PostMutation) AppendedHashtags() ([]string, bool) {
	if len(m.appendhashtags) == 0 {
		return nil, false
	}
	return m.appendhashtags, true
}

// ClearHashtags clears the value of the "hashtags" field.
func (m *PostMutation) ClearHashtags() {
	m.hashtags = nil
	m.appendhashtags = nil
	m.clearedFields[post.FieldHashtags] = struct{}{}
}

// HashtagsCleared returns if the "hashtags" field was cleared in this mutation.
func (m *PostMutation) HashtagsCleared() bool {
	_, ok := m.clearedFields[post.FieldHashtags]
	return ok
}

// ResetHashtags resets all changes to the "hashtags" field.
func (m *PostMutation) ResetHashtags() {
	m.hashtags = nil
	m.appendhashtags = nil
	delete(m.clearedFields, post.FieldHashtags)
}

// SetLinks sets the "links" field.
func (m *PostMutation) SetLinks(s []string) {
	m.links = &s
	m.appendlinks = nil
}

// Links returns the value of the "links" field in the mutation.
func (m *PostMutation) Links() (r []string, exists bool) {
	v := m.links
	if v == nil {
		return
	}
	return *v, true
}

// OldLinks returns the old "links" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldLinks(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinks: %w", err)
	}
	return oldValue.Links, nil
}

// AppendLinks adds s to the "links" field.
func (m *PostMutation) AppendLinks(s []string) {
	m.appendlinks = append(m.appendlinks, s...)
}

// AppendedLinks returns the list of values that were appended to the "links" field in this mutation.
func (m *PostMutation) AppendedLinks() ([]string, bool) {
	if len(m.appendlinks) == 0 {
		return nil, false
	}
	return m.appendlinks, true
}

// ClearLinks clears the value of the "links" field.
func (m *PostMutation) ClearLinks() {
	m.links = nil
	m.appendlinks = nil
	m.clearedFields[post.FieldLinks] = struct{}{}
}

// LinksCleared returns if the "links" field was cleared in this mutation.
func (m *PostMutation) LinksCleared() bool {
	_, ok := m.clearedFields[post.FieldLinks]
	return ok
}

// ResetLinks resets all changes to the "links" field.
func (m *PostMutation) ResetLinks() {
	m.links = nil
	m.appendlinks = nil
	delete(m.clearedFields, post.FieldLinks)
}

// SetShared sets the "shared" field.
func (m *PostMutation) SetShared(b bool) {
	m.shared = &b
}

// Shared returns the value of the "shared" field in the mutation.
func (m *PostMutation) Shared() (r bool, exists bool) {
	v := m.shared
	if v == nil {
		return
	}
	return *v, true
}

// OldShared returns the old "shared" field's value of the Post entity.
// If the Post object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PostMutation) OldShared(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShared is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShared requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShared: %w", err)
	}
	return oldValue.Shared, nil
}

// ResetShared resets all changes to the "shared" field.
func (m *PostMutation) ResetShared() {
	m.shared = nil
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *PostMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *PostMutation) AuthorCleared() bool {
	return m.AuthorIDCleared() || m.clearedauthor
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *PostMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *PostMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by ids.
func (m *PostMutation) AddLikedUserIDs(ids ...int) {
	if m.liked_users == nil {
		m.liked_users = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_users[ids[i]] = struct{}{}
	}
}

// ClearLikedUsers clears the "liked_users" edge to the User entity.
func (m *PostMutation) ClearLikedUsers() {
	m.clearedliked_users = true
}

// LikedUsersCleared reports if the "liked_users" edge to the User entity was cleared.
func (m *PostMutation) LikedUsersCleared() bool {
	return m.clearedliked_users
}

// RemoveLikedUserIDs removes the "liked_users" edge to the User entity by IDs.
func (m *PostMutation) RemoveLikedUserIDs(ids ...int) {
	if m.removedliked_users == nil {
		m.removedliked_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_users, ids[i])
		m.removedliked_users[ids[i]] = struct{}{}
	}
}

// RemovedLikedUsers returns the removed IDs of the "liked_users" edge to the User entity.
func (m *PostMutation) RemovedLikedUsersIDs() (ids []int) {
	for id := range m.removedliked_users {
		ids = append(ids, id)
	}
	return
}

// LikedUsersIDs returns the "liked_users" edge IDs in the mutation.
func (m *PostMutation) LikedUsersIDs() (ids []int) {
	for id := range m.liked_users {
		ids = append(ids, id)
	}
	return
}

// ResetLikedUsers resets all changes to the "liked_users" edge.
func (m *PostMutation) ResetLikedUsers() {
	m.liked_users = nil
	m.clearedliked_users = false
	m.removedliked_users = nil
}

// Where appends a list predicates to the PostMutation builder.
func (m *PostMutation) Where(ps ...predicate.Post) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PostMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Post).
func (m *PostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PostMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.author != nil {
		fields = append(fields, post.FieldAuthorID)
	}
	if m.created_at != nil {
		fields = append(fields, post.FieldCreatedAt)
	}
	if m.content != nil {
		fields = append(fields, post.FieldContent)
	}
	if m.hashtags != nil {
		fields = append(fields, post.FieldHashtags)
	}
	if m.links != nil {
		fields = append(fields, post.FieldLinks)
	}
	if m.shared != nil {
		fields = append(fields, post.FieldShared)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case post.FieldAuthorID:
		return m.AuthorID()
	case post.FieldCreatedAt:
		return m.CreatedAt()
	case post.FieldContent:
		return m.Content()
	case post.FieldHashtags:
		return m.Hashtags()
	case post.FieldLinks:
		return m.Links()
	case post.FieldShared:
		return m.Shared()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case post.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case post.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case post.FieldContent:
		return m.OldContent(ctx)
	case post.FieldHashtags:
		return m.OldHashtags(ctx)
	case post.FieldLinks:
		return m.OldLinks(ctx)
	case post.FieldShared:
		return m.OldShared(ctx)
	}
	return nil, fmt.Errorf("unknown Post field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case post.FieldAuthorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case post.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case post.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case post.FieldHashtags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashtags(v)
		return nil
	case post.FieldLinks:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinks(v)
		return nil
	case post.FieldShared:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShared(v)
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PostMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PostMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Post numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(post.FieldAuthorID) {
		fields = append(fields, post.FieldAuthorID)
	}
	if m.FieldCleared(post.FieldHashtags) {
		fields = append(fields, post.FieldHashtags)
	}
	if m.FieldCleared(post.FieldLinks) {
		fields = append(fields, post.FieldLinks)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PostMutation) ClearField(name string) error {
	switch name {
	case post.FieldAuthorID:
		m.ClearAuthorID()
		return nil
	case post.FieldHashtags:
		m.ClearHashtags()
		return nil
	case post.FieldLinks:
		m.ClearLinks()
		return nil
	}
	return fmt.Errorf("unknown Post nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PostMutation) ResetField(name string) error {
	switch name {
	case post.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case post.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case post.FieldContent:
		m.ResetContent()
		return nil
	case post.FieldHashtags:
		m.ResetHashtags()
		return nil
	case post.FieldLinks:
		m.ResetLinks()
		return nil
	case post.FieldShared:
		m.ResetShared()
		return nil
	}
	return fmt.Errorf("unknown Post field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PostMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.author != nil {
		edges = append(edges, post.EdgeAuthor)
	}
	if m.liked_users != nil {
		edges = append(edges, post.EdgeLikedUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PostMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case post.EdgeLikedUsers:
		ids := make([]ent.Value, 0, len(m.liked_users))
		for id := range m.liked_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedliked_users != nil {
		edges = append(edges, post.EdgeLikedUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PostMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case post.EdgeLikedUsers:
		ids := make([]ent.Value, 0, len(m.removedliked_users))
		for id := range m.removedliked_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedauthor {
		edges = append(edges, post.EdgeAuthor)
	}
	if m.clearedliked_users {
		edges = append(edges, post.EdgeLikedUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PostMutation) EdgeCleared(name string) bool {
	switch name {
	case post.EdgeAuthor:
		return m.clearedauthor
	case post.EdgeLikedUsers:
		return m.clearedliked_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PostMutation) ClearEdge(name string) error {
	switch name {
	case post.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Post unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PostMutation) ResetEdge(name string) error {
	switch name {
	case post.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case post.EdgeLikedUsers:
		m.ResetLikedUsers()
		return nil
	}
	return fmt.Errorf("unknown Post edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	age                *int
	addage             *int
	name               *string
	username           *string
	password           *string
	created_at         *time.Time
	active             *bool
	follows_count      *int
	addfollows_count   *int
	following_count    *int
	addfollowing_count *int
	clearedFields      map[string]struct{}
	followers          map[int]struct{}
	removedfollowers   map[int]struct{}
	clearedfollowers   bool
	following          map[int]struct{}
	removedfollowing   map[int]struct{}
	clearedfollowing   bool
	liked_posts        map[int]struct{}
	removedliked_posts map[int]struct{}
	clearedliked_posts bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetFollowsCount sets the "follows_count" field.
func (m *UserMutation) SetFollowsCount(i int) {
	m.follows_count = &i
	m.addfollows_count = nil
}

// FollowsCount returns the value of the "follows_count" field in the mutation.
func (m *UserMutation) FollowsCount() (r int, exists bool) {
	v := m.follows_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowsCount returns the old "follows_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFollowsCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowsCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowsCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowsCount: %w", err)
	}
	return oldValue.FollowsCount, nil
}

// AddFollowsCount adds i to the "follows_count" field.
func (m *UserMutation) AddFollowsCount(i int) {
	if m.addfollows_count != nil {
		*m.addfollows_count += i
	} else {
		m.addfollows_count = &i
	}
}

// AddedFollowsCount returns the value that was added to the "follows_count" field in this mutation.
func (m *UserMutation) AddedFollowsCount() (r int, exists bool) {
	v := m.addfollows_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowsCount resets all changes to the "follows_count" field.
func (m *UserMutation) ResetFollowsCount() {
	m.follows_count = nil
	m.addfollows_count = nil
}

// SetFollowingCount sets the "following_count" field.
func (m *UserMutation) SetFollowingCount(i int) {
	m.following_count = &i
	m.addfollowing_count = nil
}

// FollowingCount returns the value of the "following_count" field in the mutation.
func (m *UserMutation) FollowingCount() (r int, exists bool) {
	v := m.following_count
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowingCount returns the old "following_count" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFollowingCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowingCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowingCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowingCount: %w", err)
	}
	return oldValue.FollowingCount, nil
}

// AddFollowingCount adds i to the "following_count" field.
func (m *UserMutation) AddFollowingCount(i int) {
	if m.addfollowing_count != nil {
		*m.addfollowing_count += i
	} else {
		m.addfollowing_count = &i
	}
}

// AddedFollowingCount returns the value that was added to the "following_count" field in this mutation.
func (m *UserMutation) AddedFollowingCount() (r int, exists bool) {
	v := m.addfollowing_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowingCount resets all changes to the "following_count" field.
func (m *UserMutation) ResetFollowingCount() {
	m.following_count = nil
	m.addfollowing_count = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...int) {
	if m.followers == nil {
		m.followers = make(map[int]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...int) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followers, ids[i])
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []int) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []int) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "following" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...int) {
	if m.following == nil {
		m.following = make(map[int]struct{})
	}
	for i := range ids {
		m.following[ids[i]] = struct{}{}
	}
}

// ClearFollowing clears the "following" edge to the User entity.
func (m *UserMutation) ClearFollowing() {
	m.clearedfollowing = true
}

// FollowingCleared reports if the "following" edge to the User entity was cleared.
func (m *UserMutation) FollowingCleared() bool {
	return m.clearedfollowing
}

// RemoveFollowingIDs removes the "following" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...int) {
	if m.removedfollowing == nil {
		m.removedfollowing = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.following, ids[i])
		m.removedfollowing[ids[i]] = struct{}{}
	}
}

// RemovedFollowing returns the removed IDs of the "following" edge to the User entity.
func (m *UserMutation) RemovedFollowingIDs() (ids []int) {
	for id := range m.removedfollowing {
		ids = append(ids, id)
	}
	return
}

// FollowingIDs returns the "following" edge IDs in the mutation.
func (m *UserMutation) FollowingIDs() (ids []int) {
	for id := range m.following {
		ids = append(ids, id)
	}
	return
}

// ResetFollowing resets all changes to the "following" edge.
func (m *UserMutation) ResetFollowing() {
	m.following = nil
	m.clearedfollowing = false
	m.removedfollowing = nil
}

// AddLikedPostIDs adds the "liked_posts" edge to the Post entity by ids.
func (m *UserMutation) AddLikedPostIDs(ids ...int) {
	if m.liked_posts == nil {
		m.liked_posts = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_posts[ids[i]] = struct{}{}
	}
}

// ClearLikedPosts clears the "liked_posts" edge to the Post entity.
func (m *UserMutation) ClearLikedPosts() {
	m.clearedliked_posts = true
}

// LikedPostsCleared reports if the "liked_posts" edge to the Post entity was cleared.
func (m *UserMutation) LikedPostsCleared() bool {
	return m.clearedliked_posts
}

// RemoveLikedPostIDs removes the "liked_posts" edge to the Post entity by IDs.
func (m *UserMutation) RemoveLikedPostIDs(ids ...int) {
	if m.removedliked_posts == nil {
		m.removedliked_posts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_posts, ids[i])
		m.removedliked_posts[ids[i]] = struct{}{}
	}
}

// RemovedLikedPosts returns the removed IDs of the "liked_posts" edge to the Post entity.
func (m *UserMutation) RemovedLikedPostsIDs() (ids []int) {
	for id := range m.removedliked_posts {
		ids = append(ids, id)
	}
	return
}

// LikedPostsIDs returns the "liked_posts" edge IDs in the mutation.
func (m *UserMutation) LikedPostsIDs() (ids []int) {
	for id := range m.liked_posts {
		ids = append(ids, id)
	}
	return
}

// ResetLikedPosts resets all changes to the "liked_posts" edge.
func (m *UserMutation) ResetLikedPosts() {
	m.liked_posts = nil
	m.clearedliked_posts = false
	m.removedliked_posts = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.follows_count != nil {
		fields = append(fields, user.FieldFollowsCount)
	}
	if m.following_count != nil {
		fields = append(fields, user.FieldFollowingCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldActive:
		return m.Active()
	case user.FieldFollowsCount:
		return m.FollowsCount()
	case user.FieldFollowingCount:
		return m.FollowingCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldFollowsCount:
		return m.OldFollowsCount(ctx)
	case user.FieldFollowingCount:
		return m.OldFollowingCount(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldFollowsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowsCount(v)
		return nil
	case user.FieldFollowingCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowingCount(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.addfollows_count != nil {
		fields = append(fields, user.FieldFollowsCount)
	}
	if m.addfollowing_count != nil {
		fields = append(fields, user.FieldFollowingCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	case user.FieldFollowsCount:
		return m.AddedFollowsCount()
	case user.FieldFollowingCount:
		return m.AddedFollowingCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case user.FieldFollowsCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowsCount(v)
		return nil
	case user.FieldFollowingCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowingCount(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldFollowsCount:
		m.ResetFollowsCount()
		return nil
	case user.FieldFollowingCount:
		m.ResetFollowingCount()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.following != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.liked_posts != nil {
		edges = append(edges, user.EdgeLikedPosts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.following))
		for id := range m.following {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedPosts:
		ids := make([]ent.Value, 0, len(m.liked_posts))
		for id := range m.liked_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowing != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.removedliked_posts != nil {
		edges = append(edges, user.EdgeLikedPosts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.removedfollowing))
		for id := range m.removedfollowing {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedPosts:
		ids := make([]ent.Value, 0, len(m.removedliked_posts))
		for id := range m.removedliked_posts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowing {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.clearedliked_posts {
		edges = append(edges, user.EdgeLikedPosts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowing:
		return m.clearedfollowing
	case user.EdgeLikedPosts:
		return m.clearedliked_posts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowing:
		m.ResetFollowing()
		return nil
	case user.EdgeLikedPosts:
		m.ResetLikedPosts()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
