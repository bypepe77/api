// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/bypepe77/api/ent/follows"
	"github.com/bypepe77/api/ent/likes"
	"github.com/bypepe77/api/ent/post"
	"github.com/bypepe77/api/ent/schema"
	"github.com/bypepe77/api/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	followsFields := schema.Follows{}.Fields()
	_ = followsFields
	// followsDescFollowedby is the schema descriptor for followedby field.
	followsDescFollowedby := followsFields[0].Descriptor()
	// follows.FollowedbyValidator is a validator for the "followedby" field. It is called by the builders before save.
	follows.FollowedbyValidator = followsDescFollowedby.Validators[0].(func(int) error)
	// followsDescFollower is the schema descriptor for follower field.
	followsDescFollower := followsFields[1].Descriptor()
	// follows.FollowerValidator is a validator for the "follower" field. It is called by the builders before save.
	follows.FollowerValidator = followsDescFollower.Validators[0].(func(int) error)
	likesFields := schema.Likes{}.Fields()
	_ = likesFields
	// likesDescLikedAt is the schema descriptor for liked_at field.
	likesDescLikedAt := likesFields[0].Descriptor()
	// likes.DefaultLikedAt holds the default value on creation for the liked_at field.
	likes.DefaultLikedAt = likesDescLikedAt.Default.(func() time.Time)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postFields[1].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	// postDescContent is the schema descriptor for content field.
	postDescContent := postFields[2].Descriptor()
	// post.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	post.ContentValidator = postDescContent.Validators[0].(func(string) error)
	// postDescShared is the schema descriptor for shared field.
	postDescShared := postFields[5].Descriptor()
	// post.DefaultShared holds the default value on creation for the shared field.
	post.DefaultShared = postDescShared.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[0].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.DefaultPassword holds the default value on creation for the password field.
	user.DefaultPassword = userDescPassword.Default.(string)
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescActive is the schema descriptor for active field.
	userDescActive := userFields[5].Descriptor()
	// user.DefaultActive holds the default value on creation for the active field.
	user.DefaultActive = userDescActive.Default.(bool)
	// userDescFollowsCount is the schema descriptor for follows_count field.
	userDescFollowsCount := userFields[6].Descriptor()
	// user.DefaultFollowsCount holds the default value on creation for the follows_count field.
	user.DefaultFollowsCount = userDescFollowsCount.Default.(int)
	// user.FollowsCountValidator is a validator for the "follows_count" field. It is called by the builders before save.
	user.FollowsCountValidator = userDescFollowsCount.Validators[0].(func(int) error)
	// userDescFollowingCount is the schema descriptor for following_count field.
	userDescFollowingCount := userFields[7].Descriptor()
	// user.DefaultFollowingCount holds the default value on creation for the following_count field.
	user.DefaultFollowingCount = userDescFollowingCount.Default.(int)
	// user.FollowingCountValidator is a validator for the "following_count" field. It is called by the builders before save.
	user.FollowingCountValidator = userDescFollowingCount.Validators[0].(func(int) error)
}
