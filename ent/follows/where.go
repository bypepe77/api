// Code generated by ent, DO NOT EDIT.

package follows

import (
	"entgo.io/ent/dialect/sql"
	"github.com/bypepe77/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Followedby applies equality check predicate on the "followedby" field. It's identical to FollowedbyEQ.
func Followedby(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowedby), v))
	})
}

// Follower applies equality check predicate on the "follower" field. It's identical to FollowerEQ.
func Follower(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollower), v))
	})
}

// FollowedbyEQ applies the EQ predicate on the "followedby" field.
func FollowedbyEQ(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowedby), v))
	})
}

// FollowedbyNEQ applies the NEQ predicate on the "followedby" field.
func FollowedbyNEQ(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollowedby), v))
	})
}

// FollowedbyIn applies the In predicate on the "followedby" field.
func FollowedbyIn(vs ...int) predicate.Follows {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFollowedby), v...))
	})
}

// FollowedbyNotIn applies the NotIn predicate on the "followedby" field.
func FollowedbyNotIn(vs ...int) predicate.Follows {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFollowedby), v...))
	})
}

// FollowedbyGT applies the GT predicate on the "followedby" field.
func FollowedbyGT(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFollowedby), v))
	})
}

// FollowedbyGTE applies the GTE predicate on the "followedby" field.
func FollowedbyGTE(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFollowedby), v))
	})
}

// FollowedbyLT applies the LT predicate on the "followedby" field.
func FollowedbyLT(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFollowedby), v))
	})
}

// FollowedbyLTE applies the LTE predicate on the "followedby" field.
func FollowedbyLTE(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFollowedby), v))
	})
}

// FollowerEQ applies the EQ predicate on the "follower" field.
func FollowerEQ(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollower), v))
	})
}

// FollowerNEQ applies the NEQ predicate on the "follower" field.
func FollowerNEQ(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollower), v))
	})
}

// FollowerIn applies the In predicate on the "follower" field.
func FollowerIn(vs ...int) predicate.Follows {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFollower), v...))
	})
}

// FollowerNotIn applies the NotIn predicate on the "follower" field.
func FollowerNotIn(vs ...int) predicate.Follows {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFollower), v...))
	})
}

// FollowerGT applies the GT predicate on the "follower" field.
func FollowerGT(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFollower), v))
	})
}

// FollowerGTE applies the GTE predicate on the "follower" field.
func FollowerGTE(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFollower), v))
	})
}

// FollowerLT applies the LT predicate on the "follower" field.
func FollowerLT(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFollower), v))
	})
}

// FollowerLTE applies the LTE predicate on the "follower" field.
func FollowerLTE(v int) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFollower), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Follows) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Follows) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Follows) predicate.Follows {
	return predicate.Follows(func(s *sql.Selector) {
		p(s.Not())
	})
}
