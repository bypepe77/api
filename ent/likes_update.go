// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bypepe77/api/ent/likes"
	"github.com/bypepe77/api/ent/post"
	"github.com/bypepe77/api/ent/predicate"
	"github.com/bypepe77/api/ent/user"
)

// LikesUpdate is the builder for updating Likes entities.
type LikesUpdate struct {
	config
	hooks    []Hook
	mutation *LikesMutation
}

// Where appends a list predicates to the LikesUpdate builder.
func (lu *LikesUpdate) Where(ps ...predicate.Likes) *LikesUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetLikedAt sets the "liked_at" field.
func (lu *LikesUpdate) SetLikedAt(t time.Time) *LikesUpdate {
	lu.mutation.SetLikedAt(t)
	return lu
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (lu *LikesUpdate) SetNillableLikedAt(t *time.Time) *LikesUpdate {
	if t != nil {
		lu.SetLikedAt(*t)
	}
	return lu
}

// SetUserID sets the "user_id" field.
func (lu *LikesUpdate) SetUserID(i int) *LikesUpdate {
	lu.mutation.SetUserID(i)
	return lu
}

// SetPostID sets the "post_id" field.
func (lu *LikesUpdate) SetPostID(i int) *LikesUpdate {
	lu.mutation.SetPostID(i)
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LikesUpdate) SetUser(u *User) *LikesUpdate {
	return lu.SetUserID(u.ID)
}

// SetTweetID sets the "tweet" edge to the Post entity by ID.
func (lu *LikesUpdate) SetTweetID(id int) *LikesUpdate {
	lu.mutation.SetTweetID(id)
	return lu
}

// SetTweet sets the "tweet" edge to the Post entity.
func (lu *LikesUpdate) SetTweet(p *Post) *LikesUpdate {
	return lu.SetTweetID(p.ID)
}

// Mutation returns the LikesMutation object of the builder.
func (lu *LikesUpdate) Mutation() *LikesMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LikesUpdate) ClearUser() *LikesUpdate {
	lu.mutation.ClearUser()
	return lu
}

// ClearTweet clears the "tweet" edge to the Post entity.
func (lu *LikesUpdate) ClearTweet() *LikesUpdate {
	lu.mutation.ClearTweet()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LikesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		if err = lu.check(); err != nil {
			return 0, err
		}
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lu.check(); err != nil {
				return 0, err
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LikesUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LikesUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LikesUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LikesUpdate) check() error {
	if _, ok := lu.mutation.UserID(); lu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Likes.user"`)
	}
	if _, ok := lu.mutation.TweetID(); lu.mutation.TweetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Likes.tweet"`)
	}
	return nil
}

func (lu *LikesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likes.Table,
			Columns: likes.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: likes.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: likes.FieldPostID,
				},
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.LikedAt(); ok {
		_spec.SetField(likes.FieldLikedAt, field.TypeTime, value)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.UserTable,
			Columns: []string{likes.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.UserTable,
			Columns: []string{likes.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.TweetTable,
			Columns: []string{likes.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.TweetTable,
			Columns: []string{likes.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LikesUpdateOne is the builder for updating a single Likes entity.
type LikesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikesMutation
}

// SetLikedAt sets the "liked_at" field.
func (luo *LikesUpdateOne) SetLikedAt(t time.Time) *LikesUpdateOne {
	luo.mutation.SetLikedAt(t)
	return luo
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (luo *LikesUpdateOne) SetNillableLikedAt(t *time.Time) *LikesUpdateOne {
	if t != nil {
		luo.SetLikedAt(*t)
	}
	return luo
}

// SetUserID sets the "user_id" field.
func (luo *LikesUpdateOne) SetUserID(i int) *LikesUpdateOne {
	luo.mutation.SetUserID(i)
	return luo
}

// SetPostID sets the "post_id" field.
func (luo *LikesUpdateOne) SetPostID(i int) *LikesUpdateOne {
	luo.mutation.SetPostID(i)
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LikesUpdateOne) SetUser(u *User) *LikesUpdateOne {
	return luo.SetUserID(u.ID)
}

// SetTweetID sets the "tweet" edge to the Post entity by ID.
func (luo *LikesUpdateOne) SetTweetID(id int) *LikesUpdateOne {
	luo.mutation.SetTweetID(id)
	return luo
}

// SetTweet sets the "tweet" edge to the Post entity.
func (luo *LikesUpdateOne) SetTweet(p *Post) *LikesUpdateOne {
	return luo.SetTweetID(p.ID)
}

// Mutation returns the LikesMutation object of the builder.
func (luo *LikesUpdateOne) Mutation() *LikesMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LikesUpdateOne) ClearUser() *LikesUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// ClearTweet clears the "tweet" edge to the Post entity.
func (luo *LikesUpdateOne) ClearTweet() *LikesUpdateOne {
	luo.mutation.ClearTweet()
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LikesUpdateOne) Select(field string, fields ...string) *LikesUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Likes entity.
func (luo *LikesUpdateOne) Save(ctx context.Context) (*Likes, error) {
	var (
		err  error
		node *Likes
	)
	if len(luo.hooks) == 0 {
		if err = luo.check(); err != nil {
			return nil, err
		}
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = luo.check(); err != nil {
				return nil, err
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, luo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Likes)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LikesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LikesUpdateOne) SaveX(ctx context.Context) *Likes {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LikesUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LikesUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LikesUpdateOne) check() error {
	if _, ok := luo.mutation.UserID(); luo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Likes.user"`)
	}
	if _, ok := luo.mutation.TweetID(); luo.mutation.TweetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Likes.tweet"`)
	}
	return nil
}

func (luo *LikesUpdateOne) sqlSave(ctx context.Context) (_node *Likes, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likes.Table,
			Columns: likes.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: likes.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: likes.FieldPostID,
				},
			},
		},
	}
	if id, ok := luo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Likes.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := luo.mutation.PostID(); !ok {
		return nil, &ValidationError{Name: "post_id", err: errors.New(`ent: missing "Likes.post_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !likes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.LikedAt(); ok {
		_spec.SetField(likes.FieldLikedAt, field.TypeTime, value)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.UserTable,
			Columns: []string{likes.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.UserTable,
			Columns: []string{likes.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.TweetTable,
			Columns: []string{likes.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   likes.TweetTable,
			Columns: []string{likes.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Likes{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{likes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
