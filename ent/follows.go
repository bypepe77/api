// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/bypepe77/api/ent/follows"
)

// Follows is the model entity for the Follows schema.
type Follows struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Followedby holds the value of the "followedby" field.
	Followedby int `json:"followedby,omitempty"`
	// Follower holds the value of the "follower" field.
	Follower int `json:"follower,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Follows) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case follows.FieldID, follows.FieldFollowedby, follows.FieldFollower:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Follows", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Follows fields.
func (f *Follows) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case follows.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case follows.FieldFollowedby:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field followedby", values[i])
			} else if value.Valid {
				f.Followedby = int(value.Int64)
			}
		case follows.FieldFollower:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follower", values[i])
			} else if value.Valid {
				f.Follower = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Follows.
// Note that you need to call Follows.Unwrap() before calling this method if this Follows
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Follows) Update() *FollowsUpdateOne {
	return (&FollowsClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Follows entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Follows) Unwrap() *Follows {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Follows is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Follows) String() string {
	var builder strings.Builder
	builder.WriteString("Follows(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("followedby=")
	builder.WriteString(fmt.Sprintf("%v", f.Followedby))
	builder.WriteString(", ")
	builder.WriteString("follower=")
	builder.WriteString(fmt.Sprintf("%v", f.Follower))
	builder.WriteByte(')')
	return builder.String()
}

// FollowsSlice is a parsable slice of Follows.
type FollowsSlice []*Follows

func (f FollowsSlice) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
